from django.db import models

# Мы должны прописать категории
# Мы будем использовать класс, потому что с его помощью можно связать функции,
# которые будут находиться внутри него и переменные, также находящиеся внутри него.
# В качестве параметра мы передадим модели из библиотеки models в Django
class Category(models.Model):
    # Теперь для наших категорий создадим переменные.
    # Нам определенно понадобится имя и еще переменная, которая будет генерировать нам красивые URL адреса
    # создадим переменную и вложим в неё CharField из моделей Django
    name = models.CharField(max_length=200,
                            db_index=True)  # нам нужно будет сказать Django что для этого поля нужно создать индекс:

    # пора вставить красивые URL адреса
    # Например, в адресе: https://pyth.club/pyth_payed последний элемент (pyth_payed) - это и есть slug
    slug = models.SlugField(max_length=200,
                            unique=True)


    # Нам нужно будет как-то сортировать наши категории. Если мы будем сортировать по имени,
    # то сортировка будет в алфавитном порядке, так же как и сортировка по слагу.
    # Тогда получится что напитки будут идти перед пиццей, а это не очень хорошо
    # SmallIntegerField принимает значения в определенном диапазоне(зависит от типа базы данных).
    # Для баз данных поддерживаемых Django можно использовать значения от -32768 до 32767
    order_of_display = models.SmallIntegerField(unique=True)

    # Теперь внутри класса мы создадим другой в класс,
    # в котором пропишем некоторые правила, которым будет подчиняться главный класс
    class Meta:
        ordering = ('order_of_display',)
        # нужно указать как будет отображаться название. Например если категория одна,
        # до должна выводиться категория, а если их несколько, то должны выводиться категории
        verbose_name = 'категория'
        verbose_name_plural = 'категории'

    # Ещё необходимо выводить имя категории
    # Для того что бы вывести имя нужно записать функцию __str__
    # В качестве параметра мы передадим self, он говорит, внутри функции мы можем использовать все,
    # что есть в нашем классе
    def __str__(self):
        return self.name


# с категориями закончили, теперь мы будем заниматься продуктами
# создадим класс продуктов:
class Product(models.Model):
    # Категория должна быть подключена к продукту, потому что у каждого продукта должна быть своя категория:
    # ForeignKey создает связь многое к одному, благодаря чему мы можем подключить кучу продуктов к одной категории
    category = models.ForeignKey(Category,                   # Создаст связь с категориями
                                 related_name='продукты',    # Задает отображаемое название
                                 on_delete=models.CASCADE)  # Позволяет удалять объекты каскадно. То есть если мы решим удалить категорию, то автоматически удалятся все продукты, которые будут к ним привязаны

    # Обязательно нужно прописать имя и слаг как в категориях
    name = models.CharField(max_length=200,
                            db_index=True)  # нам нужно будет сказать Django что для этого поля нужно создать индекс:

    # пора вставить красивые URL адреса
    # Например, в адресе: https://pyth.club/pyth_payed последний элемент (pyth_payed) - это и есть slug
    slug = models.SlugField(max_length=200,
                            unique=True)

    # запишем ссылку для изображения:
    # TextField создаст текстовое поле. blank=True разрешает пустое значение поля
    imageURL = models.TextField(blank=True)
    description = models.TextField(blank=True)

    # decimal_places - количество знаков после запятой
    price = models.DecimalField(max_digits=10, decimal_places=2)

    class Meta:
        ordering = ('name',)
        # понадобится новый параметр, с помощью которого индексация объекта ведется сразу по нескольким параметрам:
        index_together = (('id', 'slug'),)

    # Ещё необходимо выводить имя продукта. Чтобы вывести имя, нужно записать функцию __str__
    # В качестве параметра мы передадим self, он говорит, внутри функции мы можем использовать все,
    # что есть в нашем классе
    def __str__(self):
        return self.name







